{"version":3,"sources":["stores/entity-store.ts","stores/design-store.ts","stores/dataset-store.ts","stores/transform-store.ts","stores/image-store.ts","stores/render-store.ts","stores/util.ts","stores/project.ts","stores/index.ts","stores/types.ts","data-set/import-sheet.tsx","data-set/editor.tsx","app/entity-select.tsx","data-set/page.tsx","design/editor.tsx","design/page.tsx","image/editor.tsx","image/page.tsx","transform/transform-select.tsx","transform/transform-step.tsx","transform/tx-ops.ts","transform/create-step-dialog.tsx","transform/editor.tsx","transform/page.tsx","utils/card-utils.ts","utils/render-utils.ts","utils/file-utils.ts","render/field-transforms.tsx","render/editor.tsx","render/page.tsx","project/editor.tsx","project/page.tsx","help/page.tsx","help.md","app/tab-title.tsx","app/app.tsx","App.js","serviceWorker.js","index.js"],"names":["EntityStore","currentlySelectedID","items","current","toJS","this","data","push","fields","guid","nanoid","createFromGuid","id","index","findIndex","x","splice","item","setAsCurrent","create","add","find","DesignStore","name","code","styles","decorate","observable","DataSetStore","fieldMappings","count","sheetData","apiKey","range","source","TransformStore","steps","ImageStore","RenderStore","fieldTransforms","dataSet","cardDesign","cardBackDesign","useStores","React","MobXProviderContext","Project","currentSection","enableAutosave","autosavePeriod","datasets","designs","images","transforms","renders","intervalId","callback","project","$input","document","createElement","type","onchange","result","toString","json","JSON","parse","atob","substr","newProject","loadFromJson","loadFromProject","e","target","files","length","reader","FileReader","onload","readAsDataURL","click","serialise","blob","Blob","FileSaver","saveAs","val","store","entityID","undefined","stringify","save","serialised","console","log","localStorage","setItem","LOCALSTORAGE_KEY","saveToLocalStorage","periodBase","period","periodNumber","Number","autoSave","getPeriodBase","clearInterval","window","setInterval","runAutosave","params","operation","deserial","load","error","getItem","Stores","loadFromLocalStorage","TxType","handleMappingChange","field","value","parsed","parseInt","getCellRenderer","row","entry","onChange","ImportSheet","props","importedData","setImportedData","txData","setTxData","useObserver","updateField","key","className","Classes","DIALOG_BODY","vertical","fill","placeholder","leftIcon","text","icon","onClick","sheet","url","fetch","then","fetchData","numRows","map","cellRenderer","generateColumns","tx","values","reduce","obj","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","keys","Set","forEach","datum","Object","Array","from","getKeys","DataSetEditor","dialogIsOpen","setDialogIsOpen","toggleDialog","remove","large","addOnBlur","addOnPaste","filter","Boolean","replace","enableColumnReordering","enableColumnResizing","enableRowReordering","enableRowResizing","isOpen","title","onClose","closeFn","defaultEntityItemRenderer","handleClick","modifiers","query","matchesPredicate","active","disabled","label","entitySelect","overrides","EntitySelect","Select","ofType","currentItem","selectText","onItemSelect","itemRenderer","activeItem","getActiveItem","noResults","rightIcon","DataSets","addNewDataSet","addNew","currentDataSet","DesignEditor","svgHost","setSvgHost","placeholders","setPlaceholders","design","scanForFields","fieldNames","querySelectorAll","getAttribute","mode","theme","newStyles","editorProps","$blockScrolling","newCode","dangerouslySetInnerHTML","__html","ref","addDesignMenu","$fileInput","CardDesigns","stores","setFileInput","currentDesign","accept","dataURL","readAsText","content","position","Position","RIGHT_TOP","ImageEditor","image","src","alt","Images","OperationSelect","renderTxOption","transform","renderTxOperation","txOp","description","TransformStep","step","paramNames","identity","input","STRING","output","pipe","parseInteger","NUMBER","repeat","join","toUpper","toUpperCase","txOpItems","allOperations","CreateStepDialog","toggleIsOpen","setOperation","setParams","changeParams","newParams","allParamsFilled","i","some","canSave","elevation","createStep","TransformEditor","intent","Intent","WARNING","Transforms","addNewTx","currentTx","imageRegex","PLAYING_CARD_CSS","CardBackSettings","renderAllBacks","svgForCard","html","css","renderCard","template","imageStore","$el","classList","innerHTML","node","outerHTML","match","full","replacement","exec","toRenderInfo","htmls","applyTransform","object","transformId","txStore","txStep","actualOp","TxOperations","getTxOperation","generateRenderInfo","backDesign","fieldTx","cardBackSettings","cardData","newDatum","fieldTransform","backTemplate","frontCards","cdatum","backCards","includes","frontRenderInfo","backRenderInfo","intertwine","front","back","flatMap","f","blobForSVG","svg","createCanvas","ratio","canvas","height","width","style","renderBlobToCanvas","Promise","resolve","ctx","getContext","fileReader","img","Image","drawImage","pngBlobFromSvgBlob","toBlob","triggerDownload","imgURI","filename","evt","MouseEvent","view","bubbles","cancelable","a","setAttribute","dispatchEvent","saveDeckToZip","renderInfo","pngBlobPromises","ri","all","results","contents","downloadZip","URL","createObjectURL","revokeObjectURL","moveItem","deck","fromIndex","direction","toIndex","element","FieldTransformEditor","setFieldTx","updateTx","newTx","activeField","txName","FieldSelect","renderField","iconSize","removeTransform","addTransform","FieldTransformView","isEditing","setIsEditing","edit","stopEditing","ft","drawerProps","size","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","saveCard","toDataURL","DeckRenderEditor","showDrawer","setShowDrawer","setCardBackSettings","setRatio","cardRenderInfo","setCardRenderInfo","config","toggleDrawer","updateRenderInfo","generateZip","configEntitySelect","onValueChange","DRAWER_BODY","display","DRAWER_FOOTER","DeckRenderPage","addNewCardSet","ProjectEditor","toggleAutosave","PRIMARY","exportToFile","importFile","newName","checked","min","max","updateAutosavePeriod","labelStepSize","ProjectPage","Helmet","HelpPage","TabTitle","keyMap","SAVE_PROJECT","EXPORT_PROJECT","IMPORT_PROJECT","TOGGLE_AUTOSAVE","AppContainer","toaster","setToaster","handlers","getHotkeyHandlers","isOn","show","message","selectedTabId","panel","App","isLocalhost","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","getElementById","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.45a4dcc6.chunk.js","sourcesContent":["import { nanoid } from 'nanoid';\r\nimport { toJS } from 'mobx';\r\nimport { IEntity } from './types';\r\n\r\nexport abstract class EntityStore<T extends IEntity> {\r\n  \r\n  public currentlySelectedID: string = \"\";\r\n  public items: T[] = [];\r\n  \r\n  public abstract get entityName(): string;\r\n  public abstract get label(): string;\r\n  public abstract createFromGuid(guid: string, fields: any): T;\r\n  \r\n  public save(): any {\r\n    const json = {\r\n      current: toJS(this.currentlySelectedID),\r\n      items: toJS(this.items)\r\n    };\r\n    return json;\r\n  };\r\n\r\n  public load(data: any): void {\r\n    this.currentlySelectedID = data.current;\r\n    this.items.push(...data.items);\r\n  }\r\n\r\n  public create(fields: any = {}): T {\r\n    const guid = nanoid();\r\n    return this.createFromGuid(guid, fields);\r\n  }\r\n\r\n  public remove(id: string) {\r\n    const index = this.items.findIndex((x: IEntity) => x.id === id);\r\n    if (index !== -1) {\r\n      this.items.splice(index, 1);\r\n    }\r\n  }\r\n  \r\n  public add(item: T): void {\r\n    this.items.push(item);\r\n  }\r\n\r\n  public addNew(setAsCurrent: boolean, fields: any = {}): T {\r\n    const item = this.create(fields);\r\n    this.add(item);\r\n    if(setAsCurrent) {\r\n      this.currentlySelectedID = item.id;\r\n    }\r\n    return item;\r\n  }\r\n\r\n  public find(id?: string): T|undefined {\r\n    return this.items.find(x => x.id === id);\r\n  }\r\n  \r\n  public get currentItem(): T|undefined {\r\n    return this.items.find(x => x.id === this.currentlySelectedID);\r\n  }\r\n}","import { CardDesign } from './types';\r\nimport { EntityStore } from './entity-store';\r\nimport { observable, decorate } from 'mobx';\r\n\r\nexport class DesignStore extends EntityStore<CardDesign> {\r\n\r\n  public get label(): string {\r\n    return \"Card Designs\";\r\n  }\r\n  \r\n  public get entityName(): string {\r\n    return \"designs\";\r\n  }\r\n\r\n  public createFromGuid(guid: string, fields: any): CardDesign {\r\n    return {\r\n      id: guid,\r\n      name: 'New Design',\r\n      code: fields?.code || '',\r\n      styles: fields?.styles || ''\r\n    };\r\n  }\r\n}\r\n\r\ndecorate(DesignStore, {\r\n  items: observable,\r\n  currentlySelectedID: observable\r\n});","import { DataSet } from './types';\r\nimport { EntityStore } from './entity-store';\r\nimport { observable, decorate } from 'mobx';\r\n\r\nexport class DataSetStore extends EntityStore<DataSet> {\r\n\r\n  public get label(): string {\r\n    return \"Data Sets\";\r\n  }\r\n  \r\n  public get entityName(): string {\r\n    return \"datasets\";\r\n  }\r\n\r\n  public createFromGuid(guid: string, fields: any): DataSet {\r\n    return {\r\n      id: guid,\r\n      name: 'New Dataset',\r\n      fields: ['count'],\r\n      fieldMappings: {},\r\n      data: [{count: 1}, {count:2}],\r\n      sheetData: {\r\n        apiKey: '',\r\n        range: '',\r\n        source: ''\r\n      }      \r\n    };\r\n  }\r\n}\r\n\r\ndecorate(DataSetStore, {\r\n  items: observable,\r\n  currentlySelectedID: observable\r\n});","import { Transform } from './types';\r\nimport { observable, decorate } from 'mobx';\r\nimport { EntityStore } from './entity-store';\r\n\r\nexport class TransformStore extends EntityStore<Transform> {\r\n\r\n  public get label(): string {\r\n    return \"Transforms\";\r\n  }\r\n  \r\n  public get entityName(): string {\r\n    return \"transforms\";\r\n  }\r\n\r\n  public createFromGuid(guid: string, fields: any): Transform {\r\n    return {\r\n      id: guid,\r\n      name: 'New Transform',\r\n      steps: []\r\n    };\r\n  }\r\n}\r\n\r\ndecorate(TransformStore, {\r\n  items: observable,\r\n  currentlySelectedID: observable\r\n});","import { Image } from './types';\r\nimport { EntityStore } from './entity-store';\r\nimport { observable, decorate } from 'mobx';\r\n\r\nexport class ImageStore extends EntityStore<Image> {\r\n\r\n  public get label(): string {\r\n    return \"Images\";\r\n  }\r\n  \r\n  public get entityName(): string {\r\n    return \"images\";\r\n  }\r\n\r\n  public createFromGuid(guid: string, fields: any): Image {\r\n    return {\r\n      id: guid,\r\n      name: 'New Image',\r\n      data: fields?.data || ''\r\n    };\r\n  }\r\n}\r\n\r\ndecorate(ImageStore, {\r\n  items: observable,\r\n  currentlySelectedID: observable\r\n});","import { Render } from './types';\r\nimport { EntityStore } from './entity-store';\r\nimport { observable, decorate } from 'mobx';\r\n\r\nexport class RenderStore extends EntityStore<Render> {\r\n\r\n  public get label(): string {\r\n    return \"Render Cards\";\r\n  }\r\n  \r\n  public get entityName(): string {\r\n    return \"Renders\";\r\n  }\r\n\r\n  public createFromGuid(guid: string, fields: any): Render {\r\n    return {\r\n      id: guid,\r\n      name: 'New Set of Cards',\r\n      fieldTransforms: [],\r\n      dataSet: null,\r\n      cardDesign: null,\r\n      cardBackDesign: null\r\n    };\r\n  }\r\n}\r\n\r\ndecorate(RenderStore, {\r\n  items: observable,\r\n  currentlySelectedID: observable\r\n});","import * as React from 'react';\r\nimport { MobXProviderContext } from 'mobx-react'\r\nimport { IStores } from './index';\r\n\r\nexport function useStores(): IStores {\r\n  return React.useContext(MobXProviderContext) as IStores;\r\n}\r\n\r\ntype readerCallback = (result: string|ArrayBuffer|null) => void;\r\n\r\nexport const fileLoader = (callback: readerCallback) => (e:any) => {\r\n  if(e?.target?.files?.length > 0) {\r\n    var reader = new FileReader();\r\n    reader.onload = function(){\r\n      callback(reader.result);\r\n    };\r\n    reader.readAsDataURL(e.target.files[0]);  \r\n  }\r\n};","import { decorate, observable, toJS } from \"mobx\";\r\nimport { TxOperation, TxStep, IEntity } from './types';\r\nimport { nanoid } from 'nanoid';\r\nimport { DesignStore } from './design-store';\r\nimport { DataSetStore } from './dataset-store';\r\nimport { TransformStore } from './transform-store';\r\nimport { EntityStore } from './entity-store';\r\nimport { ImageStore } from \"./image-store\";\r\nimport { RenderStore } from './render-store';\r\nimport { fileLoader } from './util';\r\nimport FileSaver from 'file-saver';\r\n\r\nexport class Project {\r\n  static LOCALSTORAGE_KEY = \"project\";\r\n  \r\n  name: string = \"My Project\";\r\n  currentSection?: string;\r\n  enableAutosave: boolean = false;\r\n  autosavePeriod: number = 15;\r\n\r\n  datasets: DataSetStore = new DataSetStore();\r\n  designs: DesignStore = new DesignStore();\r\n  images: ImageStore = new ImageStore();\r\n  transforms: TransformStore = new TransformStore();\r\n  renders: RenderStore = new RenderStore();\r\n  \r\n  intervalId: number = -1;\r\n\r\n  static loadFromJson(deserial: any): Project {\r\n    const project = new Project();\r\n    console.log(\"LOADING JSON\", deserial);\r\n\r\n    try {\r\n      project.name = deserial.name;\r\n      project.currentSection = deserial.currentSection;\r\n      project.enableAutosave = deserial.enableAutosave;\r\n      project.autosavePeriod = deserial.autosavePeriod;\r\n\r\n      project.datasets.load(deserial.datasets);\r\n      project.designs.load(deserial.designs);\r\n      project.images.load(deserial.images);\r\n      project.transforms.load(deserial.transforms);\r\n      project.renders.load(deserial.renders);\r\n    } catch(e) {\r\n      console.error(\"Unable to load project from JSON\", e);\r\n    }\r\n\r\n    return project;\r\n  }\r\n\r\n  static loadFromLocalStorage(): Project {\r\n    const serialised = localStorage?.getItem(Project.LOCALSTORAGE_KEY);\r\n    if(serialised !== null) {\r\n      try {\r\n        const deserial = JSON.parse(serialised);\r\n        return Project.loadFromJson(deserial);\r\n      } catch {\r\n        console.error(\"Unable to load Project store from local storage\");\r\n      }\r\n    }\r\n    return new Project();\r\n  }\r\n\r\n  public importFile() {\r\n    let project = this;\r\n    let $input = document.createElement('input');\r\n    $input.type = 'file';\r\n    $input.onchange = fileLoader((result: string|ArrayBuffer|null) => {\r\n      const data = result?.toString();\r\n      if(data) {\r\n        const json = JSON.parse(atob(data.substr(29)));\r\n        const newProject: Project = Project.loadFromJson(json);\r\n        project.loadFromProject(newProject);\r\n      }\r\n    });\r\n\r\n    $input.click();\r\n  }\r\n\r\n  public exportToFile() {\r\n    var json = this.serialise();\r\n    var blob = new Blob([json], {type: 'application/json;charset=utf-8'});\r\n\r\n    FileSaver.saveAs(blob, 'project.json');\r\n  }\r\n\r\n  public toggleAutosave(): boolean {\r\n    const val = !this.enableAutosave\r\n    this.enableAutosave = val;\r\n    return val;\r\n  }\r\n\r\n  public loadFromProject(project: Project) {\r\n    this.name = project.name;\r\n    this.currentSection = project.currentSection;\r\n    this.enableAutosave = project.enableAutosave;\r\n    this.autosavePeriod = project.autosavePeriod;\r\n\r\n    this.datasets = project.datasets;\r\n    this.designs = project.designs;\r\n    this.images = project.images;\r\n    this.transforms = project.transforms;\r\n    this.renders = project.renders;\r\n  };\r\n\r\n  getStore<T extends IEntity>(type: any): EntityStore<T>|null {\r\n    const key = type?.entityID ? type.entityID() : null;\r\n    const store = (this as any)[key];\r\n    if(typeof store !== undefined) {\r\n      return store;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  serialise(): string {\r\n    const serialised = JSON.stringify({\r\n      name: toJS(this.name),\r\n      currentSection: toJS(this.currentSection),\r\n      enableAutosave: toJS(this.enableAutosave),\r\n      autosavePeriod: toJS(this.autosavePeriod),\r\n\r\n      datasets: this.datasets.save(),\r\n      designs: this.designs.save(),\r\n      images: this.images.save(),\r\n      transforms: this.transforms.save(),\r\n      renders: this.renders.save()\r\n    });\r\n\r\n    return serialised;\r\n  }\r\n\r\n  saveToLocalStorage(): void {\r\n    const serialised = this.serialise();\r\n    \r\n    console.log(\"Saving to LocalStorage\", serialised, this);\r\n    localStorage?.setItem(Project.LOCALSTORAGE_KEY, serialised);\r\n  }\r\n\r\n  private runAutosave() {\r\n    if(this.enableAutosave) {\r\n      this.saveToLocalStorage();\r\n    }\r\n  }\r\n\r\n  private getPeriodBase(): number {\r\n    let periodBase = this.autosavePeriod;\r\n    if(typeof periodBase !== 'number' || periodBase < 15) {\r\n      periodBase = 15;\r\n    }\r\n\r\n    return periodBase;\r\n  }\r\n\r\n  updateAutosavePeriod(period: number|string) {\r\n    const periodNumber = Number(period);\r\n    if(periodNumber >= 15) {\r\n      this.autosavePeriod = periodNumber;\r\n      this.autoSave();\r\n    }\r\n  }\r\n\r\n  autoSave(): void {\r\n    const periodBase = this.getPeriodBase();\r\n    const period = periodBase * 1000;\r\n\r\n    if(this.intervalId !== -1) { clearInterval(this.intervalId); }\r\n    this.intervalId = window.setInterval(() => this.runAutosave(), period);\r\n  } \r\n\r\n  createStep(fields: { params: string[]; operation: TxOperation; }): TxStep {\r\n    const { params, operation } = fields;\r\n\r\n    return {\r\n      id: nanoid(),\r\n      operation,\r\n      params\r\n    } as TxStep;\r\n  }\r\n}\r\n\r\ndecorate(Project, {\r\n  name: observable,\r\n  currentSection: observable,\r\n  enableAutosave: observable,\r\n  autosavePeriod: observable\r\n});","import { Project } from './project';\r\n\r\nexport interface IStores {\r\n  project: Project\r\n}\r\n\r\nexport const Stores: IStores = {\r\n  project: Project.loadFromLocalStorage()\r\n};\r\n\r\n(window as any)['stores'] = Stores;","interface FieldMappings {\r\n  [key: string]: number\r\n};\r\n\r\nexport interface IEntity {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport interface DataSet extends IEntity {\r\n  fields: string[];\r\n  fieldMappings: FieldMappings;\r\n  sheetData: SheetData\r\n  data: any[];\r\n}\r\n\r\nexport interface CardDesign extends IEntity {\r\n  code: string;\r\n  styles: string;\r\n}\r\n\r\nexport interface Transform extends IEntity {\r\n  steps: TxStep[];\r\n}\r\n\r\nexport interface Image extends IEntity {\r\n  data: string;\r\n}\r\n\r\n\r\nexport interface Render extends IEntity {\r\n  fieldTransforms: FieldTransformIds[];\r\n  dataSet: string|null;\r\n  cardDesign: string|null;\r\n  cardBackDesign: string|null;\r\n}\r\n\r\nexport interface FieldTransformIds {\r\n  field: string;\r\n  transform: string;\r\n}\r\n\r\nexport interface SheetData {\r\n  source: string;\r\n  apiKey: string;\r\n  range: string;\r\n}\r\n\r\nexport type TxValue = string|number;\r\n\r\nexport interface TxStep {\r\n  id: string;\r\n  params: string[];\r\n  operation: TxOperation;\r\n}\r\n\r\nexport enum TxType {\r\n  STRING,\r\n  NUMBER\r\n}\r\n\r\nexport interface TxOperation {\r\n  name: string;\r\n  description?: string;\r\n  input: TxType;\r\n  output: TxType;\r\n  paramNames: string[];\r\n  pipe(value: TxValue, params: string[]): TxValue;\r\n}","import * as React from 'react';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport { H2, ButtonGroup, Button, InputGroup, Card, Classes, H3 } from '@blueprintjs/core';\r\nimport { DataSet, SheetData } from '../stores/types';\r\nimport { Table, Column, EditableCell } from '@blueprintjs/table';\r\nimport ReactAce from 'react-ace/lib/ace';\r\n\r\ninterface ImportSheetProps {\r\n  closeFn: () => void;\r\n  save: (data: object[]|null) => void;\r\n  dataSet: DataSet;\r\n}\r\n\r\ntype SheetDataKey = keyof SheetData;\r\n\r\nconst fetchData = (sheet: SheetData, save: (data: any) => void) => {\r\n  const {source, range, apiKey} = sheet;\r\n  const url = `https://sheets.googleapis.com/v4/spreadsheets/${source}/values/${range}?key=${apiKey}`;\r\n  fetch(url)\r\n    .then(x => x.json())\r\n    .then(data => {\r\n      save(data);\r\n    });\r\n};\r\n\r\nconst handleMappingChange = (dataSet: DataSet, field: string) => (value: string) => {\r\n  const parsed = parseInt(value, 10);\r\n  dataSet.fieldMappings[field] = typeof parsed == 'number' ? parsed : -1;\r\n};\r\n\r\nconst getCellRenderer = (dataSet: DataSet, field: string) => {\r\n  return (row: number) => {\r\n    let entry = dataSet.fieldMappings[field] || -1;\r\n    return (<EditableCell onChange={handleMappingChange(dataSet, field)}>{entry}</EditableCell>);\r\n  };\r\n}\r\n\r\nconst generateColumns = (dataSet: DataSet) => {\r\n  return dataSet.fields.map(field => {\r\n    return (<Column key={field} name={field} cellRenderer={getCellRenderer(dataSet, field)} />);\r\n  })\r\n}\r\n\r\nexport const ImportSheet: React.FC<ImportSheetProps> = (props) => {\r\n\r\n  const [importedData, setImportedData] = React.useState<object|null>(null);\r\n  const [txData, setTxData] = React.useState<object[]|null>(null);\r\n\r\n  return useObserver(() => {\r\n    const {dataSet} = props;\r\n    const {sheetData, fieldMappings} = dataSet;\r\n\r\n    const updateField = (key: SheetDataKey) => (e: any) => { dataSet.sheetData[key] = e.target.value; };\r\n    const transformData = () => {\r\n      if(!importedData) { return; }\r\n\r\n      const tx = (importedData as any).values.map((values: string[]) => {\r\n        return (dataSet.fields).reduce((obj: any, key: string) => {\r\n          const index = fieldMappings[key];\r\n          obj[key] = values[index] || '';\r\n\r\n          return obj;\r\n        }, {});\r\n      });\r\n\r\n      setTxData(tx);\r\n    };\r\n\r\n    return (\r\n      <Card className=\"col\">\r\n        <H2>Import Data</H2>\r\n        <div className={Classes.DIALOG_BODY}>\r\n          <ButtonGroup vertical={true} fill={true}> \r\n            <InputGroup placeholder=\"Google Sheet ID\" leftIcon=\"id-number\" value={sheetData.source} onChange={updateField('source')} />\r\n            <InputGroup placeholder=\"Google API Key\"  leftIcon=\"key\"  value={sheetData.apiKey} onChange={updateField('apiKey')} />\r\n            <InputGroup placeholder=\"Sheet Range (eg Sheet1!A1:C40)\" leftIcon=\"manually-entered-data\" value={sheetData.range} onChange={updateField('range')} />\r\n            <Button text=\"Fetch Data\" icon=\"download\" onClick={() => fetchData(sheetData, setImportedData)} />\r\n          </ButtonGroup>\r\n          {importedData && <div>\r\n            <ReactAce value={JSON.stringify(importedData, null, 2)} />\r\n            <H3>Field Mappings</H3>\r\n            <Table numRows={1}>\r\n              {generateColumns(dataSet)}\r\n            </Table>\r\n            <Button icon=\"translate\" onClick={transformData}>Transform Data</Button>\r\n          </div>}\r\n          {txData && <div>\r\n            <ReactAce value={JSON.stringify(txData, null, 2)} />\r\n          </div>}\r\n\r\n        </div>\r\n        {txData && <div className={Classes.DIALOG_FOOTER}>\r\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n            <Button onClick={() => props.save(txData)} icon=\"saved\" text=\"Save\" />\r\n          </div>\r\n        </div>}\r\n      </Card>\r\n    );\r\n  });\r\n};","import * as React from 'react';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport { H2, EditableText, Button, ButtonGroup, Dialog, TagInput } from '@blueprintjs/core';\r\nimport { Table, Column, EditableCell} from '@blueprintjs/table';\r\nimport { DataSet } from '../stores/types';\r\nimport { IStores } from '../stores/index';\r\nimport { useStores } from '../stores/util';\r\nimport { ImportSheet } from './import-sheet';\r\ninterface DataSetEditorProps {\r\n  dataSet?: DataSet;\r\n};\r\n\r\nconst getKeys = (dataSet: DataSet): string[] => {\r\n  const keys = new Set<string>();\r\n\r\n  dataSet.data.forEach(datum => {\r\n    let k = Object.keys(datum);\r\n    k.forEach(x => keys.add(x));\r\n  });\r\n\r\n  console.log(\"Columns: \", keys);\r\n  return Array.from(keys);\r\n}\r\n\r\nconst getCellRenderer = (dataSet: DataSet, key: string) => {\r\n  return (row: number) => {\r\n    let entry = dataSet.data[row][key];\r\n    return (<EditableCell value={entry} />);\r\n  };\r\n}\r\n\r\nconst generateColumns = (dataSet: DataSet) => {\r\n  const keys = getKeys(dataSet);\r\n  return keys.map(key => {\r\n    return (<Column key={key} name={key} cellRenderer={getCellRenderer(dataSet, key)} />);\r\n  });\r\n}\r\n\r\nexport const DataSetEditor: React.FC<DataSetEditorProps> = (props) => {\r\n\r\n  const stores: IStores = useStores();\r\n  const { project } = stores;\r\n\r\n  const [dialogIsOpen, setDialogIsOpen] = React.useState(false);\r\n  const toggleDialog = () => setDialogIsOpen(!dialogIsOpen);\r\n\r\n  return useObserver(() => {\r\n    const { dataSet } = props;\r\n\r\n    if (!dataSet) { return null; }\r\n    \r\n    const changeName = (text: string) => { if(dataSet) { dataSet.name = text; }};\r\n    const remove = () => project.datasets.remove(dataSet.id);\r\n    const saveImport = (data: object[]|null) => { \r\n      if(data) { dataSet.data = data; }\r\n      toggleDialog();\r\n    }\r\n    const fieldChange = (values: React.ReactNode[]) => {\r\n      dataSet.fields = values.map(x => x?.toString() || '').filter(Boolean).map(x => x.replace(/[^\\w]/g, ''));\r\n      return true; \r\n    };\r\n\r\n    return (\r\n      <section className=\"row editor\">\r\n        <div className=\"f1 col\">\r\n          <div className=\"row\">\r\n            <H2><EditableText onChange={changeName} value={dataSet.name} /></H2>\r\n            <ButtonGroup>\r\n              <Button icon=\"delete\" text=\"Remove this Design\" onClick={remove} />\r\n              <Button icon=\"import\" text=\"Import Data\" onClick={toggleDialog} />\r\n            </ButtonGroup>\r\n          </div>\r\n          <div className=\"row\">\r\n            <TagInput \r\n              large={true}\r\n              values={dataSet.fields}\r\n              addOnBlur={true}\r\n              addOnPaste={true}\r\n              onChange={fieldChange}\r\n              leftIcon=\"manually-entered-data\"\r\n            />\r\n          </div>\r\n          <div className=\"row\">\r\n            <Table\r\n              enableColumnReordering={true}\r\n              enableColumnResizing={false}\r\n              enableRowReordering={true}\r\n              enableRowResizing={false}\r\n              numRows={dataSet.data.length}\r\n            >\r\n              {generateColumns(dataSet)}\r\n            </Table>\r\n          </div>\r\n        </div>\r\n        <Dialog\r\n          isOpen={dialogIsOpen}\r\n          icon=\"import\"\r\n          title=\"Import From Google Sheets\"\r\n          className=\"dialog--wide\"\r\n          onClose={toggleDialog}\r\n        >\r\n          <ImportSheet closeFn={toggleDialog} save={saveImport} dataSet={dataSet} />\r\n        </Dialog>\r\n      </section>\r\n    );\r\n  });\r\n}","import * as React from 'react';\r\nimport { EntityStore } from '../stores/entity-store';\r\nimport { IEntity } from '../stores/types';\r\nimport { ItemRenderer, Select } from '@blueprintjs/select';\r\nimport { MenuItem, Button } from '@blueprintjs/core';\r\n\r\nexport const defaultEntityItemRenderer: ItemRenderer<IEntity> = (item, { handleClick, modifiers, query }) => {\r\n  if (!modifiers.matchesPredicate) {\r\n      return null;\r\n  }\r\n  return (\r\n      <MenuItem\r\n          active={modifiers.active}\r\n          disabled={modifiers.disabled}\r\n          label={item.name}\r\n          key={item.id}\r\n          onClick={handleClick}\r\n          text={item.name}\r\n      />\r\n  );\r\n};\r\n\r\ninterface IEntitySelectOverrides<T> {\r\n  itemRenderer?: ItemRenderer<T>;\r\n  onItemSelect?: (item: T) => void;\r\n  getActiveItem?: () => T|undefined;\r\n  className?: string;\r\n}\r\n\r\nexport const entitySelect = <T extends IEntity = IEntity>(store: EntityStore<T>, overrides?: IEntitySelectOverrides<T>) => {\r\n  const EntitySelect = Select.ofType<T>();\r\n  const currentItem = store.currentItem;\r\n  const defaultItemSelect = (item: IEntity) => store.currentlySelectedID = item.id;\r\n  const selectText = currentItem ? currentItem.name : 'Nothing Selected';\r\n\r\n  const onItemSelect = overrides?.onItemSelect || defaultItemSelect;\r\n  const itemRenderer = overrides?.itemRenderer || defaultEntityItemRenderer;\r\n  const activeItem = (overrides?.getActiveItem && overrides.getActiveItem()) || currentItem;\r\n\r\n  return (\r\n    <EntitySelect\r\n    className={overrides?.className}\r\n    items={store.items}\r\n    itemRenderer={itemRenderer}\r\n    noResults={<MenuItem disabled={true} text=\"None Added\" />}\r\n    onItemSelect={onItemSelect}\r\n    activeItem={activeItem}\r\n  >        \r\n    <Button text={selectText} rightIcon=\"double-caret-vertical\" />\r\n  </EntitySelect>    \r\n  )\r\n}","import * as React from 'react';\r\nimport { useObserver} from 'mobx-react-lite';\r\nimport { useStores } from '../stores/util';\r\nimport { IStores } from '../stores/index';\r\nimport { H1, ControlGroup, Button } from '@blueprintjs/core';\r\nimport { Project } from '../stores/project';\r\nimport { DataSetEditor } from './editor';\r\n\r\nimport { entitySelect } from '../app/entity-select';\r\n\r\nexport const DataSets: React.FC = () => {\r\n  const stores: IStores = useStores();\r\n  \r\n  const project: Project = stores.project;\r\n    \r\n  const addNewDataSet = () => {\r\n    project.datasets.addNew(true);\r\n  };\r\n\r\n  return useObserver(() => {\r\n\r\n    const currentDataSet = project.datasets.currentItem;\r\n    \r\n    return (\r\n      <section className=\"app-section card-designs\">\r\n        <H1>Data Sets</H1>\r\n        <div className=\"col\">\r\n          <div className=\"row\">\r\n            <ControlGroup fill={true}>\r\n              {entitySelect(project.datasets)}\r\n              <Button icon=\"add\" text=\"Add New Data Set\" onClick={addNewDataSet}/>\r\n            </ControlGroup>\r\n          </div>\r\n          <DataSetEditor dataSet={currentDataSet} />\r\n        </div>\r\n      </section>\r\n    );\r\n  });\r\n};\r\n","import * as React from 'react';\r\nimport { CardDesign } from '../stores/types';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport AceEditor from \"react-ace\";\r\nimport { Button, H2, EditableText, Tag, H3 } from '@blueprintjs/core';\r\nimport { useStores } from '../stores/util';\r\nimport { IStores } from '../stores/index';\r\n\r\nimport \"ace-builds/src-noconflict/mode-html\";\r\nimport \"ace-builds/src-noconflict/mode-css\";\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\n\r\ninterface DesignEditorProps {\r\n  design?:  CardDesign;\r\n}\r\n\r\nexport const DesignEditor: React.FC<DesignEditorProps> = props => {\r\n\r\n  const stores: IStores = useStores();\r\n  const { project } = stores;\r\n\r\n  const [svgHost, setSvgHost] = React.useState<HTMLDivElement|null>(null);\r\n  const [placeholders, setPlaceholders] = React.useState<string[]|null>(null);\r\n\r\n  return useObserver(() => {\r\n    const { design } = props;\r\n    if(!design) { return null; }\r\n\r\n    const {code, styles} = design;\r\n\r\n    const changeName = (text: string) => { if(design) { design.name = text; }};\r\n\r\n    const updateCode = (newCode: string) => {\r\n      design.code = newCode;\r\n      scanForFields(svgHost);\r\n    };\r\n\r\n    const updateStyle = (newStyles: string) => {\r\n      design.styles = newStyles;\r\n    };\r\n\r\n    const onSvgLoaded = ($div: HTMLDivElement|null) => {\r\n      setSvgHost($div);\r\n    }\r\n\r\n    const scanForFields = (svgHost: HTMLDivElement|null) => {\r\n      if (svgHost) {\r\n        const fieldTags: Element[] = Array.from(svgHost.querySelectorAll('[data-fieldid]'));\r\n        const fieldNames: string[] = fieldTags\r\n          .map(x => x.getAttribute('data-fieldid') || '')\r\n          .filter(Boolean);\r\n\r\n        setPlaceholders(fieldNames);\r\n      }\r\n    };\r\n\r\n    const removeDesign = () => {\r\n      project.designs.remove(design.id);      \r\n    }\r\n\r\n    return (\r\n      <section className=\"row editor\">\r\n        <div className=\"f1 col\">\r\n          <div className=\"row\">\r\n            <H2><EditableText onChange={changeName} value={design.name} /></H2>\r\n            <Button icon=\"delete\" text=\"Remove this Design\" onClick={removeDesign} />\r\n          </div>\r\n          <div className=\"col full-y f1\">\r\n            <div className=\"col f1\">\r\n              <H3>Style</H3>\r\n              <AceEditor\r\n                mode=\"css\"\r\n                theme=\"monokai\"\r\n                onChange={updateStyle}\r\n                name={`DesignEditorStyles${design.id}`}\r\n                editorProps={{ $blockScrolling: true }}\r\n                value={styles}\r\n                />\r\n            </div>\r\n            <div className=\"col f1\">\r\n              <H3>HTML</H3>\r\n              <AceEditor\r\n                mode=\"html\"\r\n                theme=\"monokai\"\r\n                onChange={updateCode}\r\n                name={`DesignEditorHtml${design.id}`}\r\n                editorProps={{ $blockScrolling: true }}\r\n                value={code}\r\n                />\r\n            </div>\r\n          </div>\r\n          {placeholders && placeholders.length > 0 && <div className=\"row\">\r\n            Identified Fields:\r\n            <div className=\"row\">{placeholders?.map(x =><Tag>{x}</Tag>)}</div>\r\n          </div>}\r\n        </div>\r\n        <div className=\"f1\">\r\n          <div className=\"full-xy\">\r\n            <style dangerouslySetInnerHTML={{__html: design.styles}} />\r\n            <div className=\"playing-card\" dangerouslySetInnerHTML={{__html: design.code}} ref={x => onSvgLoaded(x)} />\r\n          </div>          \r\n        </div>\r\n      </section>      \r\n    )\r\n  });\r\n}\r\n\r\n","import * as React from 'react';\r\nimport { useStores } from '../stores/util';\r\nimport { Project } from '../stores/project';\r\nimport { MenuItem, Button, Popover, Menu, Position, H1, ControlGroup } from '@blueprintjs/core';\r\nimport { IStores } from '../stores/index';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport { DesignEditor } from './editor';\r\n\r\nimport './design.scss';\r\nimport { entitySelect } from '../app/entity-select';\r\nimport { DesignStore } from '../stores/design-store';\r\n\r\nconst addDesignMenu = (designs: DesignStore, $fileInput?: HTMLInputElement|null) => {\r\n  const addNewDesign = () => {\r\n    designs.addNew(true);\r\n  };\r\n\r\n  const triggerFile = () => {\r\n    if($fileInput) {\r\n      $fileInput.click();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Menu>\r\n      <MenuItem text=\"From File\" onClick={triggerFile} />\r\n      <MenuItem text=\"From Text\" onClick={addNewDesign}/>\r\n    </Menu>\r\n  );\r\n};\r\n\r\n\r\nexport const CardDesigns: React.FC = () => {\r\n  const stores: IStores = useStores();\r\n  const [$fileInput, setFileInput] = React.useState<HTMLInputElement|null>();\r\n\r\n  const project: Project = stores.project;\r\n\r\n  return useObserver(() => {\r\n\r\n    const currentDesign = project.designs.currentItem;\r\n\r\n    const loadFile = (e: any) => {\r\n      if(e?.target?.files?.length > 0) {\r\n        var reader = new FileReader();\r\n        reader.onload = function(){\r\n          var dataURL = reader.result;\r\n          const code = dataURL?.toString();\r\n          if (code) {\r\n            project.designs.addNew(true, {code});\r\n          }\r\n        };\r\n        reader.readAsText(e.target.files[0]);  \r\n      }\r\n    };\r\n\r\n    return (\r\n      <section className=\"app-section card-designs\">\r\n        <H1>Card Designs</H1>\r\n        <div className=\"col\">\r\n          <div className=\"row\">\r\n            <ControlGroup fill={true}>\r\n              {entitySelect(project.designs)}\r\n              <input\r\n                type=\"file\"\r\n                accept=\".svg\"\r\n                ref={x => setFileInput(x)}\r\n                onChange={loadFile}\r\n                className=\"hidden\"\r\n              />\r\n              <Popover content={addDesignMenu(project.designs, $fileInput)} position={Position.RIGHT_TOP}>\r\n                <Button icon=\"add\" text=\"Add New Design\" />\r\n              </Popover>\r\n            </ControlGroup>\r\n          </div>\r\n          <DesignEditor design={currentDesign} />\r\n        </div>\r\n      </section>\r\n    );\r\n  });\r\n};\r\n","import * as React from 'react';\r\nimport { Image } from '../stores/types';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport { Button, H2, EditableText } from '@blueprintjs/core';\r\nimport { useStores } from '../stores/util';\r\nimport { IStores } from '../stores/index';\r\n\r\nimport \"ace-builds/src-noconflict/mode-html\";\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\n\r\ninterface ImageEditorProps {\r\n  image?:  Image;\r\n}\r\n\r\nexport const ImageEditor: React.FC<ImageEditorProps> = props => {\r\n\r\n  const stores: IStores = useStores();\r\n  const { project } = stores;\r\n\r\n\r\n  return useObserver(() => {\r\n    const { image } = props;\r\n    if(!image) { return null; }\r\n\r\n    const {data, name} = image;\r\n\r\n    const changeName = (text: string) => { if(image) { image.name = text; } };\r\n\r\n    const removeImage = () => {\r\n      project.images.remove(image.id);      \r\n    }\r\n\r\n    return (\r\n      <section className=\"row editor\">\r\n        <div className=\"f1 col\">\r\n          <div className=\"row\">\r\n            <H2><EditableText onChange={changeName} value={name} /></H2>\r\n            <Button icon=\"delete\" text=\"Remove this Image\" onClick={removeImage} />\r\n          </div>\r\n        </div>\r\n        <div className=\"f1\">\r\n          <div className=\"full-xy\">\r\n            <div className=\"image-preview\">\r\n              <img src={data} alt={`${name}`} />\r\n            </div>\r\n          </div>          \r\n        </div>\r\n      </section>      \r\n    )\r\n  });\r\n}\r\n\r\n","import * as React from 'react';\r\nimport { useObserver} from 'mobx-react-lite';\r\nimport { useStores } from '../stores/util';\r\nimport { IStores } from '../stores/index';\r\nimport { H1, ControlGroup, Button } from '@blueprintjs/core';\r\nimport { Project } from '../stores/project';\r\nimport { ImageEditor } from './editor';\r\n\r\nimport { entitySelect } from '../app/entity-select';\r\n\r\nexport const Images: React.FC = () => {\r\n  const [$fileInput, setFileInput] = React.useState<HTMLInputElement|null>();\r\n\r\n  const stores: IStores = useStores();  \r\n  const project: Project = stores.project;\r\n    \r\n  return useObserver(() => {\r\n    const store = project.images;\r\n    \r\n    const loadFile = (e: any) => {\r\n      if(e?.target?.files?.length > 0) {\r\n        var reader = new FileReader();\r\n        reader.onload = function(){\r\n          var dataURL = reader.result;\r\n          const data = dataURL?.toString();\r\n          if (data) {\r\n            store.addNew(true, {data});\r\n          }\r\n        };\r\n        reader.readAsDataURL(e.target.files[0]);  \r\n      }\r\n    };\r\n\r\n    const triggerFile = () => {\r\n      if($fileInput) {\r\n        $fileInput.click();\r\n      }\r\n    };\r\n\r\n    return (\r\n      <section className=\"app-section card-designs\">\r\n        <H1>{store.label}</H1>\r\n        <div className=\"col\">\r\n          <div className=\"row\">\r\n            <ControlGroup fill={true}>\r\n              {entitySelect(store)}\r\n              <input\r\n                type=\"file\"\r\n                accept=\".jpg, .png\"\r\n                ref={x => setFileInput(x)}\r\n                onChange={loadFile}\r\n                className=\"hidden\"\r\n              />              \r\n              <Button icon=\"add\" text=\"Add New Image\" onClick={triggerFile}/>\r\n            </ControlGroup>\r\n          </div>\r\n          <ImageEditor image={store.currentItem} />\r\n        </div>\r\n      </section>\r\n    );\r\n  });\r\n};","import * as React from 'react';\r\nimport { Select, ItemRenderer} from '@blueprintjs/select';\r\nimport { Transform, TxOperation } from '../stores/types';\r\nimport { MenuItem } from '@blueprintjs/core';\r\n\r\nexport const OperationSelect = Select.ofType<TxOperation>();\r\n\r\nexport const renderTxOption: ItemRenderer<Transform> = (transform, { handleClick, modifiers, query }) => {\r\n    if (!modifiers.matchesPredicate) {\r\n        return null;\r\n    }\r\n    return (\r\n        <MenuItem\r\n            active={modifiers.active}\r\n            disabled={modifiers.disabled}\r\n            label={transform.name}\r\n            key={transform.id}\r\n            onClick={handleClick}\r\n            text={transform.name}\r\n        />\r\n    );\r\n  };\r\n\r\n  export const renderTxOperation: ItemRenderer<TxOperation> = (txOp, { handleClick, modifiers, query }) => {\r\n    if (!modifiers.matchesPredicate) {\r\n        return null;\r\n    }\r\n    return (\r\n        <MenuItem\r\n            active={modifiers.active}\r\n            disabled={modifiers.disabled}\r\n            label={txOp.description||''}\r\n            key={txOp.name}\r\n            onClick={handleClick}\r\n            text={txOp.name}\r\n        />\r\n    );\r\n  };","import * as React from 'react';\r\nimport { TxStep } from '../stores/types';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport { Card, H3 } from '@blueprintjs/core';\r\n\r\nexport interface TransformStepProps {\r\n  step: TxStep\r\n}\r\n\r\nexport const TransformStep: React.FC<TransformStepProps> = (props: TransformStepProps) => {\r\n  return useObserver(() => {\r\n\r\n    const { step } = props;\r\n    return (\r\n      <Card>\r\n        <H3>{step.operation ? step.operation.name : 'No Operation Defined'}</H3>\r\n        {step.operation && step.operation.paramNames.map((name, index) =>\r\n          <div className=\"tx-step-param\">\r\n            <span>{name}</span>: <span>{step.params[index] || ''}</span>\r\n          </div>\r\n        )}\r\n      </Card>\r\n    );\r\n  })\r\n\r\n}","import { TxOperation, TxType } from '../stores/types';\r\n\r\nexport const identity: TxOperation = {\r\n  name: 'Identity',\r\n  description: 'Returns the same value it is given',\r\n  input: TxType.STRING,\r\n  output: TxType.STRING,\r\n  paramNames: [],\r\n  pipe: (value) => value\r\n};\r\n\r\nexport const parseInteger: TxOperation = {\r\n  name: 'Parse Integer',\r\n  description: 'Convert a String into a Number',\r\n  input: TxType.STRING,\r\n  output: TxType.NUMBER,\r\n  paramNames: [],\r\n  pipe: (value) => typeof value == 'number' ? value : parseInt(value, 10)\r\n};\r\n\r\nexport const stringify: TxOperation = {\r\n  name: 'Stringify',\r\n  description: 'Convert a Number into a String',\r\n  input: TxType.NUMBER,\r\n  output: TxType.STRING,\r\n  paramNames: [],\r\n  pipe: (value) => value.toString()\r\n}\r\n\r\nexport const repeat: TxOperation = {\r\n  name: 'Repeat String',\r\n  description: 'Repeats the String in the Text param N number of times',\r\n  input: TxType.NUMBER,\r\n  output: TxType.STRING,\r\n  paramNames: ['text'],\r\n  pipe: (value, params) => (new Array(value)).map(() => params[0]).join('')\r\n}\r\n\r\nexport const toUpper: TxOperation = {\r\n  name: 'To Uppercase',\r\n  description: 'Converts a string to uppercase',\r\n  input: TxType.STRING,\r\n  output: TxType.STRING,\r\n  paramNames: [],\r\n  pipe: (value) => value.toString().toUpperCase()\r\n}","import * as React from 'react';\r\nimport { TxStep, TxOperation } from '../stores/types';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport { Dialog, Classes, Button, H2, Card, MenuItem, InputGroup, ControlGroup } from '@blueprintjs/core';\r\nimport { OperationSelect, renderTxOperation } from './transform-select';\r\nimport * as allOperations from '../transform/tx-ops';\r\nimport { useStores } from '../stores/util';\r\nimport { IStores } from '../stores/index';\r\n\r\ninterface CreateStepDialogProps {\r\n  save: (step?: TxStep) => void;\r\n  isOpen: boolean;\r\n  toggleIsOpen: () => void;\r\n}\r\n\r\nconst txOpItems = Object.values(allOperations);\r\n\r\nexport const CreateStepDialog: React.FC<CreateStepDialogProps> = (props) => {\r\n  const { save, isOpen, toggleIsOpen } = props;\r\n  const [operation, setOperation] = React.useState<TxOperation>();\r\n  const [params, setParams] = React.useState<string[]>([]);\r\n\r\n  const stores: IStores = useStores();\r\n  const { project } = stores;\r\n\r\n  const changeParams = (index: number) => (e: any) => {\r\n    const val = e.target.value;\r\n    let newParams = [...params];\r\n    newParams[index] = val;\r\n    setParams(newParams);\r\n  };\r\n  \r\n\r\n  return useObserver(() => {\r\n\r\n    const createAndSave = () => {\r\n      if(operation != null) {\r\n        const step: TxStep = project.createStep({\r\n          params,\r\n          operation\r\n        });\r\n\r\n        save(step);\r\n        toggleIsOpen();\r\n      }\r\n    };\r\n\r\n    const selectText = operation ? operation.name : 'No Operation Selected';\r\n    const allParamsFilled = !(operation?.paramNames\r\n      .map((x, i) => i)\r\n      .some((index) => !params[index])\r\n    );\r\n      \r\n    const canSave = Boolean(operation) && allParamsFilled;\r\n\r\n    return (\r\n      <Dialog\r\n        isOpen={isOpen}\r\n        icon=\"add-to-artifact\"\r\n        title=\"Create New Step\"\r\n        className=\"dialog--wide\"\r\n        onClose={toggleIsOpen}\r\n      >\r\n        <div className={`col`}>\r\n          <div className={Classes.DIALOG_BODY}>\r\n            <H2>Create Step</H2>\r\n            <Card elevation={1}>\r\n              <ControlGroup fill={true}>\r\n                <OperationSelect\r\n                  items={Object.values(txOpItems)}\r\n                  itemRenderer={renderTxOperation}\r\n                  noResults={<MenuItem disabled={true} text=\"No Operations Defined\" />}\r\n                  onItemSelect={setOperation}\r\n                >\r\n                  <Button text={selectText} rightIcon=\"double-caret-vertical\" />\r\n                </OperationSelect>\r\n              </ControlGroup>\r\n            </Card>\r\n            <Card elevation={1}>\r\n              {!operation && \"Select an Operation to define Parameters\"}\r\n              {operation && operation.paramNames.map((name, index) =>\r\n                <InputGroup placeholder={name} onChange={changeParams(index)} value={params[index]} key={name} />\r\n              )}\r\n            </Card>\r\n          </div>\r\n          <div className={Classes.DIALOG_FOOTER}>\r\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n              <Button onClick={createAndSave} icon=\"saved\" text=\"Save\" disabled={!canSave}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  });\r\n}","import * as React from 'react';\r\nimport { Button, H2, EditableText, Callout, Intent } from '@blueprintjs/core';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport { Transform, TxStep } from '../stores/types';\r\nimport { useStores } from '../stores/util';\r\nimport { IStores } from '../stores/index';\r\nimport { TransformStep } from './transform-step';\r\nimport { CreateStepDialog } from './create-step-dialog';\r\n\r\ninterface TransformEditorProps {\r\n  transform?:  Transform;\r\n}\r\n\r\nexport const TransformEditor: React.FC<TransformEditorProps> = props => {\r\n\r\n  const stores: IStores = useStores();\r\n  const { project } = stores;\r\n  \r\n  const [dialogIsOpen, setDialogIsOpen] = React.useState(false);\r\n  const toggleDialog = () => setDialogIsOpen(!dialogIsOpen);\r\n\r\n  return useObserver(() => {\r\n    const { transform } = props;\r\n    if(!transform) { return null; }\r\n\r\n    const changeName = (text: string) => { if(transform) { transform.name = text; }};\r\n\r\n    const removeTransform = () => {\r\n      project.transforms.remove(transform.id);      \r\n    }\r\n\r\n    const saveStep = (step?: TxStep) => {\r\n      if(transform && step) {\r\n        transform.steps.push(step);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <section className=\"row editor\">\r\n        <div className=\"f1 col\">\r\n          <div className=\"row\">\r\n            <H2><EditableText onChange={changeName} value={transform.name} /></H2>\r\n            <Button icon=\"delete\" text=\"Remove this Transform\" onClick={removeTransform} />\r\n            <Button icon=\"add-to-artifact\" text=\"Add New Step\" onClick={toggleDialog} />\r\n          </div>\r\n          <div className=\"row\">\r\n            {(transform.steps.length === 0) && <Callout\r\n              title=\"No Steps Defined\"\r\n              intent={Intent.WARNING}\r\n              icon=\"step-chart\"\r\n            ></Callout> }\r\n            {transform.steps.map(step =>\r\n              <TransformStep step={step} key={step.id} />\r\n            )}\r\n          </div>\r\n        </div>\r\n        <CreateStepDialog isOpen={dialogIsOpen} save={saveStep} toggleIsOpen={()=>setDialogIsOpen(false)} />\r\n      </section>\r\n    )\r\n  });\r\n}\r\n\r\n","import * as React from 'react';\r\nimport { Button, H1, ControlGroup } from '@blueprintjs/core';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport { useStores } from '../stores/util';\r\nimport { Project } from '../stores/project';\r\nimport { IStores } from '../stores/index';\r\nimport { renderTxOption } from './transform-select';\r\nimport { TransformEditor } from './editor';\r\nimport { Transform } from '../stores/types';\r\n\r\n// import './transform.scss';\r\nimport { entitySelect } from '../app/entity-select';\r\n\r\nexport const Transforms: React.FC = () => {\r\n  const stores: IStores = useStores();\r\n\r\n  const project: Project = stores.project;\r\n\r\n  const addNewTx = () => {\r\n    project.transforms.addNew(true);\r\n  };\r\n\r\n  return useObserver(() => {\r\n\r\n    const currentTx = project.transforms.currentItem;\r\n \r\n    return (\r\n      <section className=\"app-section transforms\">\r\n        <H1>Transforms</H1>\r\n        <div className=\"col\">\r\n          <div className=\"row\">\r\n            <ControlGroup fill={true}>\r\n              {entitySelect<Transform>(project.transforms, {itemRenderer: renderTxOption})}\r\n              <Button icon=\"add\" text=\"Add New Transform\" onClick={addNewTx} />\r\n            </ControlGroup>\r\n          </div>\r\n          <TransformEditor transform={currentTx} />\r\n        </div>\r\n      </section>\r\n    );\r\n  });\r\n};\r\n","import { CardDesign, DataSet, FieldTransformIds, TxStep } from '../stores/types';\r\nimport { ImageStore } from '../stores/image-store';\r\nimport { Project } from '../stores/project';\r\nimport { TransformStore } from '../stores/transform-store';\r\nimport * as TxOperations from '../transform/tx-ops';\r\nconst imageRegex = /!\\[(\\w*)(?:\\|(.*))?\\]/g;\r\n\r\nexport const PLAYING_CARD_CSS = `\r\n*, *:before, *:after {  \r\n  box-sizing: border-box;\r\n}\r\n\r\n.playing-card {\r\n  height: 89mm;\r\n  width: 64mm;\r\n  font-size: 10mm;\r\n}\r\n\r\nforeignObject .playing-card {\r\n  height: 100%;\r\n  width: 100%;\r\n}`;\r\n\r\nexport const CardBackSettings = {\r\n  NONE: \"NONE\",\r\n  FIRST: \"FIRST\",\r\n  COLLATE: \"COLLATE\",\r\n  AFTER: \"AFTER\"\r\n};\r\n\r\nconst renderAllBacks = [\r\n  CardBackSettings.AFTER,\r\n  CardBackSettings.COLLATE\r\n];\r\n\r\nexport interface RenderInfo {\r\n  html: string,\r\n  css: string\r\n}\r\n\r\nexport const svgForCard = (html: string, css: string): string => {\r\n  return (\r\n    `<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"320px\" height=\"445px\">\r\n      <foreignObject x=\"0\" y=\"0\" width=\"320px\" height=\"445px\">\r\n        <div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"width: 100%; height: 100%;\">\r\n         <style>${PLAYING_CARD_CSS}</style>\r\n          <style>${css}</style>\r\n          ${html}\r\n        </div>\r\n      </foreignObject>\r\n    </svg>`\r\n  );\r\n};\r\n\r\nconst renderCard = (template: string, datum: any, imageStore: ImageStore) =>{\r\n  //Render into template\r\n  const $el = document.createElement(\"div\");\r\n  $el.classList.add(\"playing-card\");\r\n  $el.innerHTML = template || '';\r\n\r\n  $el.querySelectorAll('[data-fieldid]').forEach(node => {\r\n    const key = node.getAttribute(\"data-fieldid\");\r\n    if(key != null) {\r\n      const value = datum[key];\r\n      node.innerHTML = value;\r\n    }\r\n  });\r\n\r\n  var result = $el.outerHTML;\r\n\r\n\r\n  //Image Replacement\r\n  var match = null;\r\n  while ((match = imageRegex.exec(result)) !== null) {\r\n    const [full, name, className] = match;\r\n    const image = imageStore.items.find(x => x.name === name);\r\n    if (image) {\r\n      const replacement = `<img src=\"${image?.data}\" class=\"${className||''}\"/>`;\r\n      result = result.replace(full, replacement);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nconst toRenderInfo = (htmls: string[], css: string): RenderInfo[] => {\r\n  return htmls.map(html => ({html, css}));\r\n}\r\n\r\nconst getTxOperation = (txStep: TxStep) => {\r\n  return Object.values(TxOperations).find(x => x.name === txStep.operation.name);\r\n}\r\n\r\nconst applyTransform = (object: any, field: string, transformId: string, txStore: TransformStore) => {\r\n  const transform = txStore.find(transformId);\r\n  let value = object[field];\r\n  if(typeof value === 'undefined') { return ''; }\r\n\r\n  if(transform) {\r\n    transform.steps.forEach(txStep => {\r\n      const actualOp = getTxOperation(txStep);\r\n      if(actualOp) {\r\n        value = actualOp.pipe(value, txStep.params);\r\n      }\r\n    });\r\n    object[field] = value;\r\n  }\r\n}\r\n\r\nexport const generateRenderInfo = (design: CardDesign|undefined, backDesign: CardDesign|undefined, dataSet: DataSet|undefined, fieldTx: FieldTransformIds[], cardBackSettings: string, project: Project): RenderInfo[] => {\r\n  const imageStore = project.images;\r\n  const txStore = project.transforms;\r\n\r\n  const data = dataSet?.data || [];\r\n  const cardData = (data || []).map(datum => {\r\n    const newDatum = {...datum };\r\n    //Transform data by fieldMappings\r\n    fieldTx.forEach(fieldTransform => {\r\n      const {field, transform} = fieldTransform;\r\n      applyTransform(newDatum, field, transform, txStore);\r\n    });\r\n\r\n    //Return transformed data;\r\n    return newDatum;\r\n  });\r\n  \r\n  const template = design?.code || '';\r\n  const backTemplate = backDesign?.code || '';\r\n\r\n  const frontCards = cardData.map(cdatum => renderCard(template, cdatum, imageStore))\r\n\r\n  let backCards: string[] = [];\r\n  \r\n  if (renderAllBacks.includes(cardBackSettings)) {\r\n    backCards = cardData.map(cdatum => renderCard(backTemplate, cdatum, imageStore))\r\n  } else if (cardBackSettings === CardBackSettings.FIRST) {\r\n    backCards = [renderCard(backTemplate, cardData[0], imageStore)];\r\n  }\r\n  \r\n  const frontRenderInfo = toRenderInfo(frontCards, design?.styles || '');\r\n  const backRenderInfo = toRenderInfo(backCards, backDesign?.styles || '');\r\n\r\n\r\n  return intertwine(cardBackSettings, frontRenderInfo, backRenderInfo);\r\n\r\n};\r\n\r\nconst intertwine = (cardBackSettings: string, front: RenderInfo[], back: RenderInfo[]): RenderInfo[] => {\r\n  switch(cardBackSettings) {\r\n    case CardBackSettings.NONE: return front;\r\n    case CardBackSettings.FIRST: return [...front, back[0]];\r\n    case CardBackSettings.AFTER: return [...front, ...back];\r\n    case CardBackSettings.COLLATE: return front.flatMap((f, i) => [f, back[i]]);\r\n    default: return [];\r\n  }\r\n};\r\n","\r\nexport const CARD_WIDTH = 320; //5px/mm\r\nexport const CARD_HEIGHT = 445; //5px/mm\r\n\r\nexport const blobForSVG = (svg: string): Blob => {\r\n  return new Blob([svg], {type: 'image/svg+xml;charset=utf-8'});\r\n};\r\n\r\nconst createCanvas = (ratio: number): HTMLCanvasElement => {\r\n  const canvas = document.createElement('canvas');\r\n\r\n  canvas.height = CARD_HEIGHT;\r\n  canvas.width = CARD_WIDTH;\r\n  canvas.style.width  = canvas.width + \"px\";\r\n  canvas.style.height = canvas.height + \"px\";\r\n\r\n  canvas.width *= ratio;\r\n  canvas.height *= ratio;\r\n\r\n  return canvas;\r\n};\r\n\r\nexport const renderBlobToCanvas = (blob: Blob, ratio: number): Promise<HTMLCanvasElement> => {\r\n\r\n  return new Promise<HTMLCanvasElement>((resolve) => {\r\n    const canvas = createCanvas(ratio);\r\n    const ctx = canvas.getContext('2d');\r\n    \r\n    const fileReader = new FileReader();  \r\n    fileReader.onload = (e: any) => {\r\n      const img = new Image();\r\n      const url = e.target.result;\r\n      \r\n      img.onload = function() {\r\n        ctx?.drawImage(\r\n          img,\r\n          0, 0.,\r\n          CARD_WIDTH, CARD_HEIGHT,\r\n          0, 0,\r\n          CARD_WIDTH * ratio, CARD_HEIGHT * ratio\r\n        );\r\n        resolve(canvas);\r\n      }\r\n  \r\n      img.src = url; \r\n    }\r\n    \r\n    fileReader.readAsDataURL(blob);\r\n  });\r\n};\r\n\r\nexport const pngBlobFromSvgBlob = (blob: Blob, ratio: number):  Promise<Blob|null> => {\r\n  return new Promise<Blob|null>((resolve) => {\r\n    const canvas = createCanvas(ratio)\r\n    const ctx = canvas.getContext('2d');\r\n    \r\n    const fileReader = new FileReader();\r\n    \r\n    fileReader.onload = (e: any) => {\r\n      const img = new Image();\r\n      const url = e.target.result;\r\n      \r\n      img.onload = function() {\r\n        ctx?.drawImage(\r\n          img,\r\n          0, 0.,\r\n          CARD_WIDTH, CARD_HEIGHT,\r\n          0, 0,\r\n          CARD_WIDTH * ratio, CARD_HEIGHT * ratio\r\n        );\r\n        canvas.toBlob(resolve, 'image/png', 1.0);\r\n      }\r\n  \r\n      img.src = url;\r\n  \r\n    }\r\n    fileReader.readAsDataURL(blob);\r\n  });\r\n};\r\n","import { RenderInfo, svgForCard } from './card-utils';\r\nimport {blobForSVG, pngBlobFromSvgBlob} from './render-utils';\r\nimport { downloadZip } from 'client-zip';\r\n\r\nexport const triggerDownload = (imgURI: string, filename: string = 'card.png') => {\r\n  var evt = new MouseEvent('click', {\r\n    view: window,\r\n    bubbles: false,\r\n    cancelable: true\r\n  });\r\n\r\n  var a = document.createElement('a');\r\n  a.setAttribute('download', filename);\r\n  a.setAttribute('href', imgURI);\r\n  a.setAttribute('target', '_blank');\r\n\r\n  a.dispatchEvent(evt);\r\n};\r\n\r\n\r\nexport const saveDeckToZip = async (renderInfo: RenderInfo[], ratio: number) => {\r\n  const pngBlobPromises = renderInfo.map(ri => svgForCard(ri.html, ri.css))\r\n  .map(svg => blobForSVG(svg))\r\n  .map(blob => pngBlobFromSvgBlob(blob, ratio));\r\n\r\n  const results = await Promise.all(pngBlobPromises);\r\n\r\n  const contents = results\r\n    .map((blob: Blob|null, index: number) => {\r\n    if(blob!= null) {\r\n      return {\r\n        name: `card${index}.png`,\r\n        input: blob as Blob\r\n      };\r\n    } else {\r\n      return null;\r\n    }\r\n  }).filter(x => x !== null);\r\n\r\n  const blob = await downloadZip([...contents]).blob();\r\n  const url = URL.createObjectURL(blob);\r\n\r\n  triggerDownload(url, 'deck.zip');\r\n  URL.revokeObjectURL(url);\r\n};\r\n","import * as React from 'react';\r\nimport { Render, Transform, FieldTransformIds } from '../stores/types';\r\nimport { useStores } from '../stores/util';\r\nimport { IStores } from '../stores/index';\r\nimport { Project } from '../stores/project';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport { Icon, Button, Dialog, MenuItem, Classes } from '@blueprintjs/core';\r\nimport { Select, ItemRenderer } from '@blueprintjs/select';\r\nimport { entitySelect } from '../app/entity-select';\r\n\r\nconst removeTransform = (deck: Render, index: number) => {\r\n  deck.fieldTransforms.splice(index, 1);\r\n};\r\n\r\nconst moveItem = (deck: Render, fromIndex: number, direction: number) => {\r\n  const toIndex = fromIndex + direction;\r\n\r\n  var element = deck.fieldTransforms[fromIndex];\r\n  deck.fieldTransforms.splice(fromIndex, 1);\r\n  deck.fieldTransforms.splice(toIndex, 0, element);\r\n};\r\n\r\nconst addTransform = (deck: Render) => {\r\n  deck.fieldTransforms.push({\r\n    field: \"\",\r\n    transform: \"\"\r\n  });    \r\n};\r\n\r\ninterface FieldTransformEditorProps {\r\n  deck: Render;\r\n  save: (fieldTransforms: FieldTransformIds[]) => void;\r\n}\r\n\r\nexport const FieldTransformEditor: React.FC<FieldTransformEditorProps> = props => {\r\n  const {deck, save} = props;\r\n  const stores: IStores = useStores();  \r\n  const project: Project = stores.project;\r\n  const [fieldTx, setFieldTx] = React.useState<FieldTransformIds[]>(deck.fieldTransforms);\r\n  \r\n  const updateTx = (index: number, key: \"field\"|\"transform\", value: string) => {\r\n    const newTx = fieldTx.map(x => ({...x}));\r\n    newTx[index][key] = value;\r\n    setFieldTx(newTx);\r\n  }\r\n\r\n  return useObserver(() => {  \r\n\r\n    const fields = [...(project.datasets.find(deck.dataSet||undefined)?.fields || [])];\r\n\r\n    return (\r\n      <div className=\"col\">\r\n        <div className={Classes.DIALOG_BODY}>\r\n          {fieldTx.length === 0 && \"No Transforms Defined\"}\r\n          {fieldTx.map((tx, index) => {\r\n            const activeField = tx.field||null;\r\n            const txName = project.transforms.find(tx.transform);\r\n            const key = `${index}-${txName||''}-${tx.field}`;\r\n            return (\r\n              <div className=\"row\" key={key}>\r\n                <div className=\"row f2 space-between\">\r\n                  <FieldSelect\r\n                    items = {fields}\r\n                    itemRenderer={renderField}\r\n                    noResults={<MenuItem disabled={true} text=\"No Fields Added\" />}\r\n                    onItemSelect={(field) => updateTx(index, \"field\", field)}\r\n                    activeItem={activeField}\r\n                  >\r\n                    <Button text={activeField} rightIcon=\"double-caret-vertical\" />\r\n                  </FieldSelect>\r\n                  <Icon icon=\"flows\" iconSize={20} />\r\n                  {entitySelect<Transform>(project.transforms, {\r\n                    onItemSelect: (item) => updateTx(index, \"transform\", item.id),\r\n                    getActiveItem: () => project.transforms.find(fieldTx[index].transform)\r\n                  })}\r\n                </div>\r\n                <div className=\"row f1\">\r\n                  <Button icon=\"delete\" onClick={() => removeTransform(deck, index)}></Button>\r\n                  <Button icon=\"arrow-down\" onClick={() => moveItem(deck, index, 1)}></Button>\r\n                  <Button icon=\"arrow-up\" onClick={() => moveItem(deck, index, -1)}></Button>\r\n                </div>\r\n              </div>\r\n            )\r\n          }).filter(Boolean)}\r\n        </div>\r\n        <div className={Classes.DIALOG_FOOTER}>\r\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n            <Button icon=\"add-row-bottom\" onClick={() => addTransform(deck)}>Add a Transform</Button>\r\n            <Button icon=\"add-row-bottom\" onClick={() => save(fieldTx)}>Save Changes</Button>              \r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n}\r\n\r\n\r\ninterface FieldTransformViewProps {\r\n  deck: Render;\r\n}\r\n\r\n\r\nexport const FieldTransformView: React.FC<FieldTransformViewProps> = (props) => {\r\n  const { deck } = props;\r\n  const [isEditing, setIsEditing] = React.useState<boolean>(false);\r\n  \r\n  const edit = () => setIsEditing(true);\r\n  const stopEditing = () => setIsEditing(false);\r\n\r\n  return useObserver(() => {\r\n\r\n    const save = (ft: FieldTransformIds[]) => {\r\n      deck.fieldTransforms = ft;\r\n      setIsEditing(false);\r\n    };\r\n\r\n    const fieldTx = deck.fieldTransforms;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"row\">\r\n          {fieldTx.length === 0 && \"No Transforms Applied\"}\r\n          {fieldTx.length === 1 && \"1 Transform Applied\"}\r\n          {fieldTx.length > 1 && <span>{`${fieldTx.length} Transforms Applied`}</span>}\r\n          <Button icon=\"edit\" onClick={edit}>Edit</Button>\r\n        </div>\r\n        <Dialog isOpen={isEditing} onClose={stopEditing}>\r\n          <FieldTransformEditor deck={deck} save={save} />\r\n        </Dialog>\r\n      </>\r\n    );\r\n  });\r\n}\r\n\r\nconst FieldSelect = Select.ofType<string>();\r\n\r\nconst renderField: ItemRenderer<string> = (field, { handleClick, modifiers, query }) => {\r\n  if (!modifiers.matchesPredicate) {\r\n      return null;\r\n  }\r\n  return (\r\n      <MenuItem\r\n          active={modifiers.active}\r\n          disabled={modifiers.disabled}\r\n          key={field}\r\n          onClick={handleClick}\r\n          text={field}\r\n          label={field}\r\n      />\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport { H2, EditableText, Button, ButtonGroup, MenuItem, Drawer, Classes, Label, HTMLSelect, NumericInput } from '@blueprintjs/core';\r\nimport { Select } from '@blueprintjs/select';\r\nimport { Render, CardDesign, DataSet, IEntity } from '../stores/types';\r\nimport { IStores } from '../stores/index';\r\nimport { useStores } from '../stores/util';\r\nimport { defaultEntityItemRenderer } from '../app/entity-select';\r\nimport { EntityStore } from '../stores/entity-store';\r\nimport {\r\n  PLAYING_CARD_CSS,\r\n  CardBackSettings,\r\n  RenderInfo,\r\n  generateRenderInfo,\r\n  svgForCard\r\n} from '../utils/card-utils';\r\nimport {\r\n  triggerDownload,\r\n  saveDeckToZip\r\n} from '../utils/file-utils';\r\nimport {  \r\n  renderBlobToCanvas,\r\n  blobForSVG\r\n} from '../utils/render-utils';\r\n\r\nimport './render.scss'\r\nimport { FieldTransformView } from './field-transforms';\r\n\r\ninterface DeckRenderEditorProps {\r\n  config?: Render;\r\n};\r\n\r\nconst drawerProps = {\r\n  size: \"100%\",\r\n  autoFocus: true,\r\n  canEscapeKeyClose: true,\r\n  canOutsideClickClose: true,\r\n  enforceFocus: true,\r\n  title: \"Card Images\",\r\n};\r\n\r\nconst saveCard = async (html: string, css: string, ratio: number) => {\r\n  \r\n  const svg = svgForCard(html, css);\r\n  const blob = blobForSVG(svg);\r\n\r\n  const canvas = await renderBlobToCanvas(blob, ratio);\r\n\r\n  const imgURI = canvas\r\n  .toDataURL('image/png')\r\n  .replace('image/png', 'image/octet-stream');\r\n\r\n  triggerDownload(imgURI);\r\n};\r\n\r\nexport const DeckRenderEditor: React.FC<DeckRenderEditorProps> = (props) => {\r\n\r\n  const stores: IStores = useStores();\r\n  const { project } = stores;\r\n  const [showDrawer, setShowDrawer] = React.useState<Boolean>(false);\r\n\r\n  const [cardBackSettings, setCardBackSettings] = React.useState<string>(CardBackSettings.COLLATE);\r\n  const [ratio, setRatio] = React.useState<number>(1);\r\n  const [cardRenderInfo, setCardRenderInfo] = React.useState<RenderInfo[]>([]);\r\n\r\n  return useObserver(() => {\r\n    const { config } = props;\r\n\r\n\r\n    if (!config) { return null; }\r\n    \r\n    const toggleDrawer = () => setShowDrawer(!showDrawer);\r\n\r\n    const changeName = (text: string) => { if(config) { config.name = text; }};\r\n    const setDesign = (design: IEntity) => { config.cardDesign = design.id; }\r\n    const setBackDesign = (design: IEntity) => { config.cardBackDesign = design.id; }\r\n    const setDataSet = (dataSet: IEntity) => { config.dataSet = dataSet.id; }\r\n    const remove = () => project.renders.remove(config.id);\r\n\r\n    const dataSet: DataSet|undefined = project.datasets.find(config.dataSet || undefined);\r\n    const design: CardDesign|undefined = project.designs.find(config.cardDesign || undefined);\r\n    const backDesign: CardDesign|undefined = project.designs.find(config.cardBackDesign || undefined);\r\n\r\n\r\n    const updateRenderInfo = (cardBackSettings: string) => {\r\n      const renderInfo = generateRenderInfo(design, backDesign, dataSet, config.fieldTransforms, cardBackSettings, project);\r\n      setCardRenderInfo(renderInfo);\r\n    }\r\n\r\n    const openDrawer = () => {\r\n      updateRenderInfo(cardBackSettings);\r\n      toggleDrawer();\r\n    };\r\n\r\n    const generateZip = () => {\r\n      const renderInfo = generateRenderInfo(design, backDesign, dataSet, config.fieldTransforms, cardBackSettings, project);\r\n      saveDeckToZip(renderInfo, ratio);\r\n    }\r\n\r\n    return (\r\n      <section className=\"row editor\">\r\n        <div className=\"f1 col\">\r\n          <div className=\"row\">\r\n            <H2><EditableText onChange={changeName} value={config.name} /></H2>\r\n            <ButtonGroup>\r\n              <Button icon=\"delete\" text=\"Remove this Card Set\" onClick={remove} />\r\n              <Button icon=\"download\" text=\"Download as Zip\" onClick={generateZip} />\r\n            </ButtonGroup>\r\n          </div>\r\n          <div className=\"row\">\r\n            <Label>\r\n              Card Face Design\r\n              {configEntitySelect<CardDesign>(project.designs, setDesign, design)}\r\n            </Label>      \r\n          </div>\r\n          <div className=\"row\">\r\n            <Label>\r\n              Card Back Design\r\n              {configEntitySelect<CardDesign>(project.designs, setBackDesign, backDesign)}\r\n            </Label>      \r\n          </div>\r\n          <div className=\"row\">\r\n            <Label>\r\n              Data Set\r\n              {configEntitySelect(project.datasets, setDataSet, dataSet)}\r\n            </Label>         \r\n          </div>\r\n          <div className=\"row\">\r\n            <Label>\r\n              Transforms\r\n              <FieldTransformView deck={config} />\r\n            </Label>\r\n          </div>\r\n          <div className=\"row\">\r\n            <Label>\r\n              Card Back Placement\r\n              <HTMLSelect value={cardBackSettings} onChange={e => setCardBackSettings(e.target.value)}>\r\n                <option value={CardBackSettings.NONE}>Don't Render Backs</option>\r\n                <option value={CardBackSettings.FIRST}>Only Render The First Back</option>\r\n                <option value={CardBackSettings.AFTER}>Render Backs after Faces</option>\r\n                <option value={CardBackSettings.COLLATE}>Collate Card Faces and Backs</option>\r\n              </HTMLSelect>\r\n            </Label>\r\n          </div>\r\n          <div className=\"row\">\r\n            <Label>\r\n              Image Scale\r\n              <NumericInput value={ratio} onValueChange={setRatio} leftIcon=\"maximize\"/>\r\n            </Label>\r\n          </div>\r\n          <div className=\"row\">\r\n            <Button onClick={openDrawer}>Generate Cards</Button>\r\n          </div>\r\n        </div>\r\n        <Drawer\r\n          onClose={toggleDrawer}\r\n          isOpen={Boolean(showDrawer)}\r\n          icon=\"info-sign\"\r\n          {...drawerProps}\r\n        >\r\n          <div className={Classes.DRAWER_BODY}>\r\n            <div className={Classes.DIALOG_BODY}>\r\n              <style dangerouslySetInnerHTML={{__html: design?.styles||'' }}/>\r\n              <style dangerouslySetInnerHTML={{__html: backDesign?.styles||'' }}/>\r\n              <style dangerouslySetInnerHTML={{__html: PLAYING_CARD_CSS}} />\r\n              <div className=\"card-list row wrap\">\r\n                {cardRenderInfo.map((x: RenderInfo, i: number) => (\r\n                  <div className=\"hover-actions-container\" key={i}>\r\n                    <div className=\"hover-actions\">\r\n                      <Button icon=\"download\" onClick={() => saveCard(x.html, x.css, ratio)} >\r\n                        Download\r\n                      </Button>\r\n                    </div>\r\n                    <div style={{display: 'inline'}} dangerouslySetInnerHTML={{__html: x.html}}/>\r\n                  </div>                    \r\n                ))}\r\n              </div>              \r\n            </div>\r\n          </div>\r\n          <div className={Classes.DRAWER_FOOTER}>\r\n            <div className=\"row\">\r\n              <div className=\"col\">\r\n                <Label>\r\n                  Card Back Placement\r\n                  <HTMLSelect value={cardBackSettings} onChange={e => { setCardBackSettings(e.target.value); updateRenderInfo(e.target.value); }}>\r\n                    <option value={CardBackSettings.NONE}>Don't Render Backs</option>\r\n                    <option value={CardBackSettings.FIRST}>Only Render The First Back</option>\r\n                    <option value={CardBackSettings.AFTER}>Render Backs after Faces</option>\r\n                    <option value={CardBackSettings.COLLATE}>Collate Card Faces and Backs</option>\r\n                  </HTMLSelect>\r\n                </Label>\r\n              </div>\r\n              <div className=\"col\">\r\n                <Label>\r\n                  Image Scale\r\n                  <NumericInput value={ratio} onValueChange={setRatio} leftIcon=\"maximize\"/>\r\n                </Label>\r\n              </div>\r\n              <div className=\"col\">\r\n                <Label>\r\n                  &nbsp;\r\n                  <Button icon=\"download\" text=\"Download as Zip File\" onClick={generateZip} className=\"flex\" />\r\n                </Label>\r\n              </div>              \r\n            </div>\r\n          </div>\r\n        </Drawer>\r\n      </section>\r\n    );\r\n  });\r\n}\r\n\r\nconst configEntitySelect = <T extends IEntity>(\r\n  store: EntityStore<T>,\r\n  onItemSelect: (item: T) => void,\r\n  currentItem: T|undefined\r\n): JSX.Element => {\r\n  const EntitySelect = Select.ofType<T>();\r\n\r\n  return (\r\n    <EntitySelect\r\n      items={store.items}\r\n      itemRenderer={defaultEntityItemRenderer}\r\n      noResults={<MenuItem disabled={true} text=\"None Available\" />}\r\n      onItemSelect={onItemSelect}\r\n      activeItem={currentItem}\r\n    >        \r\n      <Button text={currentItem?.name || 'Nothing Selected'} rightIcon=\"double-caret-vertical\" />\r\n    </EntitySelect>\r\n  )\r\n};","import * as React from 'react';\r\nimport { useObserver} from 'mobx-react-lite';\r\nimport { useStores } from '../stores/util';\r\nimport { IStores } from '../stores/index';\r\nimport { H1, ControlGroup, Button } from '@blueprintjs/core';\r\nimport { Project } from '../stores/project';\r\nimport { DeckRenderEditor } from './editor';\r\n\r\nimport { entitySelect } from '../app/entity-select';\r\n\r\nexport const DeckRenderPage: React.FC = () => {\r\n  const stores: IStores = useStores();\r\n  \r\n  const project: Project = stores.project;\r\n    \r\n  const addNewCardSet = () => {\r\n    project.renders.addNew(true);\r\n  };\r\n\r\n  return useObserver(() => {\r\n    const store = project.renders;\r\n    const current = store.currentItem;\r\n    \r\n    return (\r\n      <section className=\"app-section card-designs\">\r\n        <H1>{store.label}</H1>\r\n        <div className=\"col\">\r\n          <div className=\"row\">\r\n            <ControlGroup fill={true}>\r\n              {entitySelect(project.renders)}\r\n              <Button icon=\"add\" text=\"Add New Card Set\" onClick={addNewCardSet}/>\r\n            </ControlGroup>\r\n          </div>\r\n          <DeckRenderEditor config={current} />\r\n        </div>\r\n      </section>\r\n    );\r\n  });\r\n};\r\n","import * as React from 'react';\r\nimport { Project } from '../stores/project';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport { H2, EditableText, Button, FormGroup, Switch, Label, ButtonGroup, Intent, Slider } from '@blueprintjs/core';\r\n\r\ninterface ProjectEditorProps {\r\n  project: Project;\r\n}\r\n\r\nexport const ProjectEditor: React.FC<ProjectEditorProps> = (props) => {\r\n\r\n  const {project} = props;\r\n  const toggleAutosave = () => { project.enableAutosave = !project.enableAutosave; };\r\n\r\n  return useObserver(() => {\r\n\r\n    const changeName = (newName: string) => project.name = newName;\r\n\r\n    return (\r\n      <section className=\"row editor\">\r\n        <div className=\"f1 col\">\r\n          <div className=\"row\">\r\n            <ButtonGroup large={true}>\r\n              <Button icon=\"saved\" text=\"Save Project\" onClick={() => project.saveToLocalStorage()} intent={Intent.PRIMARY} />  \r\n              <Button icon=\"export\" text=\"Export Save File\" onClick={() => project.exportToFile()} intent={Intent.PRIMARY} />  \r\n              <Button icon=\"import\" text=\"Import Save File\" onClick={() => project.importFile()} intent={Intent.PRIMARY} />  \r\n            </ButtonGroup>\r\n          </div>\r\n          <div className=\"row\">\r\n            <Label>\r\n              Project Name\r\n              <H2><EditableText onChange={changeName} value={project.name} /></H2>\r\n            </Label>\r\n          </div>\r\n          <div className=\"row\">\r\n            <FormGroup label=\"Autosave Settings\" intent={Intent.PRIMARY} className=\"full-x\">\r\n              <Switch label=\"Enable Autosave\" checked={project.enableAutosave} onChange={toggleAutosave} />\r\n              <Label>\r\n                Autosave Period\r\n                <Slider value={project.autosavePeriod} min={15} max={360} onChange={val => project.updateAutosavePeriod(val)} intent={Intent.PRIMARY} labelStepSize={30} />\r\n              </Label>\r\n            </FormGroup>\r\n          </div>       \r\n        </div>\r\n      </section>\r\n    );\r\n  });\r\n}","import * as React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { H1 } from '@blueprintjs/core';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport { IStores } from '../stores/index';\r\nimport { Project } from '../stores/project';\r\nimport { useStores } from '../stores/util';\r\nimport { ProjectEditor } from './editor';\r\n\r\nimport \"./project.scss\";\r\n\r\nexport const ProjectPage: React.FC = () => {\r\n  \r\n  const stores: IStores = useStores();\r\n  \r\n  const project: Project = stores.project;\r\n\r\n  return useObserver(() => {\r\n    return (\r\n      <section className=\"app-section project\">\r\n        <H1>Project</H1>\r\n        <Helmet>\r\n          <title>{project?.name||''} - Deckster CCG</title>\r\n        </Helmet>\r\n        <div className=\"row\">\r\n          <ProjectEditor project={project}/>\r\n        </div>\r\n      </section>\r\n    )\r\n  });\r\n};","import * as React from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\n// @ts-ignore\r\nimport * as markdownContent from '../help.md';\r\n\r\nexport const HelpPage: React.FC = () => {\r\n  return (\r\n    <div className=\"app-section help\">\r\n      <div className=\"full-xy\">\r\n        <ReactMarkdown source={markdownContent.default} />\r\n      </div>\r\n    </div>\r\n  );\r\n}","export default \"# Help\\r\\n\\r\\n## Project Management\\r\\nThe Project represents all of the information associated with a game. Within a single project you can have multiple card designs, data sets, and composed decks of cards.\\r\\n\\r\\nUnder the project tab, you will find controls to manage the saving and loading of your project.\\r\\n\\r\\nYou can manually make backups by clicking the Export to File button, and load a Project file by clicking the Import from File button.\\r\\n\\r\\nYou can also set up autosave, which will save your project within the browser automatically, on a fixed interval, allowing you to continue work on the project without fear of accidentally closing the window and losing your progress.\\r\\n\\r\\n>Note: There is a limit to how much data can be stored locally. If you find your Project is getting large (especially regarding images), its best to rely on manually saving to file, rather than the local autosave.\\r\\n\\r\\n### Keyboard Shortcuts\\r\\nTo help with project management, several keyboard shortcuts have been made available, which you can use from any part of the application.\\r\\n\\r\\n* Save Project Locally: `alt + S`\\r\\n* Export Project to File: `alt + shift + S`\\r\\n* Import Project from File: `alt + O`\\r\\n* Toggle Autosave: `alt + shift + A`\\r\\n\\r\\n## Creating a Design\\r\\n\\r\\nUnder the Designs tab, you can create card templates. These templates are written as HTML and CSS.\\r\\n\\r\\nThe design templates get combined with the data sets (see Importing Data section below) to produce the final result. To mark a section of the template for use by a field in the data set, add a `data-fieldid` attribute to the target element, giving a value of the intended data set field name.\\r\\n\\r\\nFor Example:\\r\\n\\r\\n```html\\r\\n<div class=\\\"monster-card\\\">\\r\\n  <h1 data-fieldid=\\\"monster_name\\\">MONSTER NAME HERE</h1>\\r\\n  <div className=\\\"stats\\\">\\r\\n    ...\\r\\n  </div>\\r\\n  <footer data-fieldid=\\\"flavor_text\\\"></footer>\\r\\n</div>\\r\\n```\\r\\n\\r\\n## Importing Data\\r\\n\\r\\nUnder the Data Sets tab, you can import and edit data sets to populate cards.\\r\\n\\r\\nEach data set has a defined set of fields associated with it.\\r\\n\\r\\n### Importing from Google Sheets\\r\\n\\r\\nBy clicking the Import Data button, you can import a table of data from Google Sheets by providing the Sheet ID, a valid Google API Key, and the sheet/range you wish to import.\\r\\n\\r\\nOnce the table of data is imported, you can map each column (by index) to a field in this data set, and populate the data set as a map of fields and values.\\r\\n\\r\\n## Including Images\\r\\n\\r\\nUnder the Images tab, you can import images into the project.\\r\\n\\r\\nYou can bring in images that have been imported to the project to your card designs, by using the format `![imageName]`. When rendering the card, this text will be replaced with an `img` element containing the image with the given name. If you want to give that image element a class attribute, you can use the format `![imageName|classList]`\\r\\n\\r\\n## Data Transformations\\r\\n\\r\\nThis feature is not yet implemented\\r\\n\\r\\n## Rendering Decks of Cards\\r\\n\\r\\nUnder the Render Cards tab, you will find tools to produce decks of cards, ready for use.\\r\\nYou can create multiple configuration, each one able to handle one deck of cards.\\r\\n\\r\\n1. Select the designs for the faces and backs of the cards.\\r\\n2. Select the data set to be used with these designs\\r\\n3. Map data transforms to each of the fields in the data set\\r\\n4. Select a layout for card faces and backs\\r\\n5. Set a scale. By default, the cards will render at 320x445px (5px per mm for a standard playing card). Increasing the scale will generate higher resolution cards.\\r\\n6. Hit the Generate Cards button\\r\\n7. You can select individual cards to download, or download the entire deck as a zip file. This is all handled client-side, meaning no large downloads to process.\";","import * as React from 'react';\r\nimport { Icon, IconName } from '@blueprintjs/core';\r\n\r\ninterface TabTitleProps {\r\n  label: string,\r\n  icon: IconName\r\n}\r\n\r\nexport const TabTitle: React.FC<TabTitleProps> = props => {\r\n  const { label, icon } = props;\r\n\r\n  return (\r\n    <div className=\"col tab-title\">\r\n      <span className=\"label\">{label}</span>\r\n      <Icon icon={icon} iconSize={64} title={label}/>\r\n    </div>\r\n  );\r\n};","import * as React from 'react'\r\nimport { Tab, Tabs, Toaster, Intent } from '@blueprintjs/core';\r\nimport { useObserver } from 'mobx-react-lite';\r\nimport { HotKeys } from 'react-hotkeys';\r\n\r\nimport { Project } from '../stores/project';\r\nimport { useStores } from '../stores/util';\r\nimport { DataSets } from '../data-set/page';\r\nimport { CardDesigns } from '../design/page';\r\nimport { Images } from '../image/page';\r\nimport { Transforms } from '../transform/page';\r\nimport { DeckRenderPage } from '../render/page';\r\nimport { ProjectPage } from '../project/page';\r\nimport { HelpPage } from '../help/page';\r\n\r\nimport './app.scss';\r\nimport './print.scss';\r\nimport \"@blueprintjs/table/lib/css/table.css\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport { TabTitle } from './tab-title';\r\n\r\nconst keyMap = {\r\n  SAVE_PROJECT: \"alt+s\",\r\n  EXPORT_PROJECT: \"alt+shift+s\",\r\n  IMPORT_PROJECT: \"alt+o\",\r\n  TOGGLE_AUTOSAVE: \"alt+shift+a\"\r\n};\r\n\r\nconst getHotkeyHandlers = (project: Project, toggleAutosave: () => void): any => {\r\n  return {\r\n    SAVE_PROJECT: () => project.saveToLocalStorage(),\r\n    EXPORT_PROJECT: () => project.exportToFile(),\r\n    IMPORT_PROJECT: () => project.importFile(),\r\n    TOGGLE_AUTOSAVE: () => toggleAutosave()\r\n  }\r\n};\r\n\r\nconst AppContainer: React.FC = () => {\r\n  const { project } = useStores();\r\n  const [toaster, setToaster] = React.useState<Toaster|null>(null);\r\n  React.useEffect(() => project.autoSave());\r\n\r\n  return useObserver(() => {\r\n    const tabChange = (id: string) => project.currentSection = id;\r\n    const toggleAutosave = () => {\r\n      const isOn = project.toggleAutosave();\r\n      toaster?.show({\r\n        intent: Intent.PRIMARY,\r\n        message: isOn ? \"Autosave Enabled\" : \"Autosave Disabled\"\r\n      });\r\n    }\r\n\r\n    const handlers = getHotkeyHandlers(project, toggleAutosave);\r\n\r\n    return (\r\n      <HotKeys keyMap={keyMap} handlers={handlers} className=\"full-xy\">\r\n        <div className=\"app-container bp3-dark\">\r\n          <Tabs id='AppToolbarTabs' onChange={tabChange} selectedTabId={project.currentSection} className=\"full-xy\">\r\n            <Tab id='project' panel={<ProjectPage />}>\r\n              <TabTitle label=\"Project\" icon=\"projects\" />\r\n            </Tab>\r\n            <Tab id='design' panel={<CardDesigns />} >\r\n              <TabTitle label=\"Card Designs\" icon=\"page-layout\" />\r\n            </Tab>\r\n            <Tab id='data' panel={<DataSets />} >\r\n              <TabTitle label=\"Data Sets\" icon=\"th\" />\r\n            </Tab>\r\n            <Tab id='images' panel={<Images />} >\r\n              <TabTitle label=\"Images\" icon=\"media\" />\r\n            </Tab>\r\n            <Tab id='transform' panel={<Transforms />} >\r\n              <TabTitle label=\"Transforms\" icon=\"flows\" />\r\n            </Tab>\r\n            <Tab id='generateConfigs' panel={<DeckRenderPage />} >\r\n              <TabTitle label=\"Render Cards\" icon=\"layers\" />\r\n            </Tab>\r\n            <Tab id=\"help\" panel={<HelpPage />} >\r\n              <TabTitle label=\"Help\" icon=\"help\" />\r\n            </Tab>\r\n          </Tabs>\r\n          <Toaster ref={toaster => setToaster(toaster)} position=\"bottom-right\" />\r\n        </div>\r\n      </HotKeys>\r\n    );\r\n  });\r\n};\r\n\r\nexport default AppContainer;","import React from 'react';\nimport { Provider } from 'mobx-react';\nimport './App.css';\nimport { Stores } from './stores/index';\n\nimport AppContainer from './app/app';\n\nfunction App() {\n  return (    \n    <Provider {...Stores}>\n      <div className=\"app\">\n        <AppContainer />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}